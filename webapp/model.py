from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class News(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String, nullable=False)
    url = db.Column(db.String, unique=True, nullable=False)
    published = db.Column(db.DateTime, nullable=False)
    text = db.Column(db.Text, nullable=True)

    def __repr__(self):
        return'<News {} {}>'.format(self.title, self.url)



# создаем БД в переменной db, которая будет инстансом (т е экземпляром) SQLAlchemy
# далее описываем модель. Модель - это класс, который наследуется от db.model.
# В описании класса есть атрибуты/поля, которые будут в нашей БД (id, дата публикации и т д)

# id (идентификатор)  - это просто число, оно же - 'первичный ключ'. БД индексирует его особо. Это наш внутренний
# идентификатор, который уникален, присваивается объекту данных в самом начале и не меняется.
# Паспортные данные, ФИО и пр может поменяться, а 'id' - нет

# Параметры "полей": db.Column - БД создает соответствующую колонку, далее db.Integer - указываем тип данных
# ('text' - это просто длинная 'string', это важно для более сложных, промышленных БД). Параметр nullable указывает,
# может ли это значение не быть в сопоставляемых данных. nullable=False означает, что у меня не м б новости,
# которой не присуща дата публикации, заголовок или url. Т о я прошу БД меня проверять:
# если я попробую вставить новость без url, программа выдаст ошибку. 'text' не обязателен, поэтому в этом поле
# параметр nullable=True. URL новости должен быть уникальным -> параметр unique=True

# функция __repr__(self) помогает разработчику идентифицировать данные (что это объект типа "новость"
# с таким-то "заголовком"  и таким-то "url"). 'self' означает, что мы обращаемся к тому экземпляру класса,
# который сейчас активен

# id снабжено атрибутом 'primary_key', в результате БД каждому следующему item будет присваивать
# идентификатор на 1 единицу больще (поэтому в объекте 'News' мы не прописываем атрибут 'id')